package org.example.ParserLexer;
import java_cup.runtime.*;

// Utiliza class BasicLexerCupV que genera el lexer.jflex, pequeños cambios tomados de la página de CUP
// Cambios en parser code, init with y scan with {: ...

action code {:
    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){
        System.out.println("Inicio Cup");
    }

    public void adios(){
        System.out.println("Fin Cup");
    }
:}

parser code {:
    // Conectar este parser con un scanner
    BasicLexerCup lex;

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

:}

init with {: :};

/* Conectar con el scanner */
scan with {: return lex.next_token(); :};

/* Terminales (tokens retornados por el scanner). */
terminal INTEGER_T, CHAR_T, STRING_T, COMPARACION, ASIGNA, SUMA, FINLINEA, IDENTIFIER, INTEGER_LITERAL, STRING_LITERAL; /* Generales */
terminal INTEGER, FLOAT, BOOL, CHAR, STRING; /* Tipos */
terminal ERROR;
terminal COMENTARIO_LINEA, COMENTARIO_VARIAS_LINEAS; /* Estructura */
terminal BLOQUE_A, BLOQUE_C; /* Estructura */
terminal MAIN; /* Estructura */
terminal CORCHETE_A, CORCHETE_C; /* Simbolos */
terminal PARENTESIS_A, PARENTESIS_C; /* Simbolos */
terminal ASIGNACION; /* Simbolos */
terminal DELIMITADOR; /* Simbolos */
terminal RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA, INCREMENTO, DECREMENTO; /* Operadores aritméticos*/
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUALDAD, DIFERENTE; /* Operadores relacionales */
terminal CONJUNCION, DISYUNCION, NEGACION; /* Operadores logicos */
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS;
terminal PRINT, READ; /* Operaciones de lectura */

// no terminales
non terminal programa, lineas, linea, tipos, literal;

//produccion de inicio
start with programa;

programa ::= {: hola();:} lineas {: adios();:} ;
tipos ::= INTEGER_T | STRING_T | CHAR_T ;
literal ::= INTEGER_LITERAL | STRING_LITERAL;
lineas ::= linea ;
lineas ::= lineas linea ;
linea ::= tipos IDENTIFIER ASIGNA literal FINLINEA;

programaAux ::= 
    /* Puedes definir aquí las reglas para el cuerpo del programa */
    ;

/* Estructuras de control */
